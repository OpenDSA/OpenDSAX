{"connections": {"con-49": {"to": "isa", "from": "Prim's algorithm"}, "con-48": {"to": "Prim's algorithm", "from": "algorithms"}, "con-43": {"to": "uses", "from": "Kruskal's algorithm"}, "con-42": {"to": "unweighted graph", "from": "types"}, "con-41": {"to": "types", "from": "graph"}, "con-40": {"to": "weighted graph", "from": "types"}, "con-47": {"to": "algorithms", "from": "minimal-cost spanning tree"}, "con-46": {"to": "Kruskal's algorithm", "from": "algorithms"}, "con-45": {"to": "algorithms", "from": "minimal-cost spanning tree"}, "con-44": {"to": "UNION/FIND", "from": "uses"}, "con-36": {"to": "labeled graph", "from": "types"}, "con-29": {"to": "types", "from": "graph"}, "con-28": {"to": "dense", "from": "types"}, "con-37": {"to": "types", "from": "graph"}, "con-25": {"to": "problems", "from": "graph"}, "con-24": {"to": "topological sort", "from": "problems"}, "con-27": {"to": "types", "from": "graph"}, "con-26": {"to": "shortest paths", "from": "problems"}, "con-21": {"to": "problems", "from": "graph"}, "con-20": {"to": "minimal-cost spanning tree", "from": "problems"}, "con-23": {"to": "problems", "from": "graph"}, "con-22": {"to": "traversal", "from": "problems"}, "con-35": {"to": "types", "from": "graph"}, "con-32": {"to": "directed graph", "from": "types"}, "con-33": {"to": "types", "from": "graph"}, "con-30": {"to": "sparse graph", "from": "types"}, "con-31": {"to": "types", "from": "graph"}, "con-50": {"to": "greedy algorithm", "from": "isa"}, "con-18": {"to": "adjacency list", "from": "implementedby"}, "con-19": {"to": "problems", "from": "graph"}, "con-38": {"to": "undirected graph", "from": "types"}, "con-39": {"to": "types", "from": "graph"}, "con-10": {"to": "digraph", "from": "abbreviation"}, "con-11": {"to": "contains", "from": "graph"}, "con-12": {"to": "edges <edge>", "from": "contains"}, "con-13": {"to": "contains", "from": "graph"}, "con-14": {"to": "vertices <vertex>", "from": "contains"}, "con-15": {"to": "implementedby", "from": "graph"}, "con-16": {"to": "adjacency matrix", "from": "implementedby"}, "con-17": {"to": "implementedby", "from": "graph"}, "con-34": {"to": "acyclic graph", "from": "types"}, "con-8": {"to": "directed acyclic graph", "from": "types"}, "con-9": {"to": "abbreviation", "from": "directed graph"}, "con-6": {"to": "DAG", "from": "abbreviation"}, "con-7": {"to": "types", "from": "directed graph"}, "con-4": {"to": "algorithm", "from": "typeof"}, "con-5": {"to": "abbreviation", "from": "directed acyclic graph"}, "con-2": {"to": "directed acyclic graph", "from": "types"}, "con-3": {"to": "typeof", "from": "bubble sort"}, "con-1": {"to": "types", "from": "acyclic graph"}}, "linking_phrase": {"implementedby": " implemented by\r\n", "contains": " contains\r\n", "problems": " problems\r\n", "abbreviation": " abbreviation\r\n", "uses": " uses", "typeof": " type of", "algorithms": " algorithms\r\n", "isa": " is a", "types": " types\r\n"}, "concepts": {"shortest paths": "", "Prim's algorithm": "<dd>A <a class=\"reference internal\" href=\"#term-greedy-algorithm\"><em class=\"xref std std-term ODSAterm\">greedy algorithm</em></a> for computing the <a class=\"reference internal\" href=\"#term-mcst\"><em class=\"xref std std-term ODSAterm\">MCST</em></a> of a\n<a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a>.\nIt is nearly identical to <a class=\"reference internal\" href=\"#term-dijkstra-s-algorithm\"><em class=\"xref std std-term ODSAterm\">Dijkstra's algorithm</em></a> for\nsolving the <a class=\"reference internal\" href=\"#term-single-source-shortest-paths-problem\"><em class=\"xref std std-term ODSAterm\">single-source shortest paths problem</em></a>,\nwith the only difference being the calculation done to update\nthe best-known distance.</dd>", "edges <edge>": "", "digraph": "<dd>Abbreviation for <a class=\"reference internal\" href=\"#term-directed-graph\"><em class=\"xref std std-term ODSAterm\">directed graph</em></a>.</dd>", "directed graph": "<dd>A <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> whose <a class=\"reference internal\" href=\"#term-edge\"><em class=\"xref std std-term ODSAterm\">edges</em></a> each are directed\nfrom one of its defining <a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertices</em></a> to the\nother.</dd>", "greedy algorithm": "<dd>An algorithm that makes locally optimal choices at each step.</dd>", "DAG": "<dd>Abbreviation for <a class=\"reference internal\" href=\"#term-directed-acyclic-graph\"><em class=\"xref std std-term ODSAterm\">directed acyclic graph</em></a>.</dd>", "dense": "", "bubble sort": "<dd>A simple sort that requires <span class=\"math\">\\(Theta(n^2)\\)</span> time in best,\naverage, and worst cases.\nEven an optimized version will normally run slower than\n<a class=\"reference internal\" href=\"#term-insertion-sort\"><em class=\"xref std std-term ODSAterm\">insertion sort</em></a>, so it has little to recommend it.</dd>", "unweighted graph": "", "graph": "<dd>A <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> <span class=\"math\">\\(\\mathbf{G} = (\\mathbf{V}, \\mathbf{E})\\)</span>\nconsists of a set of <a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertices</em></a>\n<span class=\"math\">\\(\\mathbf{V}\\)</span> and a set of <a class=\"reference internal\" href=\"#term-edge\"><em class=\"xref std std-term ODSAterm\">edges</em></a>\n<span class=\"math\">\\(\\mathbf{E}\\)</span>, such that each edge in <span class=\"math\">\\(\\mathbf{E}\\)</span> is\na connection between a pair of vertices in <span class=\"math\">\\(\\mathbf{V}\\)</span>.</dd>", "Kruskal's algorithm": "<dd>An algorithm for computing the <a class=\"reference internal\" href=\"#term-mcst\"><em class=\"xref std std-term ODSAterm\">MCST</em></a> of a\n<a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a>.\nDuring processing, it makes use of the <a class=\"reference internal\" href=\"#term-union-find\"><em class=\"xref std std-term ODSAterm\">UNION/FIND</em></a>\nprocess to efficiently determine of two vertices are within the\nsame <a class=\"reference internal\" href=\"#term-subgraph\"><em class=\"xref std std-term ODSAterm\">subgraph</em></a>.</dd>", "adjacency list": "<dd>An implementation for a <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> that uses an (array-based)\n<a class=\"reference internal\" href=\"#term-list\"><em class=\"xref std std-term ODSAterm\">list</em></a> to represent the <a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertices</em></a> of the\ngraph, and each vertex is in turn represented by a\n(linked) list of the vertices that are\n<a class=\"reference internal\" href=\"#term-neighbor\"><em class=\"xref std std-term ODSAterm\">neighbors</em></a>.</dd>", "labeled graph": "<dd>A <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> with labels associated with the\n<a class=\"reference internal\" href=\"#term-node\"><em class=\"xref std std-term ODSAterm\">nodes</em></a>.</dd>", "minimal-cost spanning tree": "<dd>Abbreviated as MCST, or sometimes as MST.\nDerived from a <a class=\"reference internal\" href=\"#term-weighted-graph\"><em class=\"xref std std-term ODSAterm\">weighted graph</em></a>, the MCST is the\n<a class=\"reference internal\" href=\"#term-subset\"><em class=\"xref std std-term ODSAterm\">subset</em></a> of the graph's <a class=\"reference internal\" href=\"#term-edge\"><em class=\"xref std std-term ODSAterm\">edges</em></a> that\nmaintains the connectivitiy of the graph while having lowest\ntotal cost (as defined by the sum of the\n<a class=\"reference internal\" href=\"#term-weight\"><em class=\"xref std std-term ODSAterm\">weights</em></a> of the edges in the MCST).\nThe result is referred to as a <a class=\"reference internal\" href=\"#term-460\"><em class=\"xref std std-term ODSAterm\">tree</em></a> because it would\nnever have a <a class=\"reference internal\" href=\"#term-cycle\"><em class=\"xref std std-term ODSAterm\">cycle</em></a> (since an edge could be removed from\nthe cycle and still preserve connectivity).\nTwo algorithms to solve this problem are\n<a class=\"reference internal\" href=\"#term-prim-s-algorithm\"><em class=\"xref std std-term ODSAterm\">Prim's algorithm</em></a> and <a class=\"reference internal\" href=\"#term-kruskal-s-algorithm\"><em class=\"xref std std-term ODSAterm\">Kruskal's algorithm</em></a>.</dd>", "traversal": "<dd>Any process for visiting all of the objects in a collection\n(such as a <a class=\"reference internal\" href=\"#term-460\"><em class=\"xref std std-term ODSAterm\">tree</em></a> or <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a>) in some order.</dd>", "topological sort": "<dd>The process of laying out the <a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertices</em></a> of a\n<a class=\"reference internal\" href=\"#term-dag\"><em class=\"xref std std-term ODSAterm\">DAG</em></a> in a <a class=\"reference internal\" href=\"#term-linear-order\"><em class=\"xref std std-term ODSAterm\">linear order</em></a> such that no vertex\n<span class=\"math\">\\(A\\)</span> in the order is preceded by a vertex that can be\nreached by a (directed) <a class=\"reference internal\" href=\"#term-path\"><em class=\"xref std std-term ODSAterm\">path</em></a> from <span class=\"math\">\\(A\\)</span>.\nUsually the (directed) edges in the graph define a\nprerequisite system, and the goal of the topological sort is\nto list the vertices in an order such that no prerequisites are\nviolated.</dd>", "adjacency matrix": "<dd>An implementation for a <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> that uses a 2-dimensional\narray where each row and each column corresponds to a\n<a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertex</em></a> in the <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a>. A given row and column in\nthe matrix corresponds to an edge from the <a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertex</em></a>\ncorresponding to the row to the vertex corresponding to the\ncolumn.</dd>", "acyclic graph": "<dd>In <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> terminology, a graph that contains no\n<a class=\"reference internal\" href=\"#term-cycle\"><em class=\"xref std std-term ODSAterm\">cycles</em></a>.</dd>", "weighted graph": "<dd>A <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> whose <a class=\"reference internal\" href=\"#term-edge\"><em class=\"xref std std-term ODSAterm\">edges</em></a> each have an\nassociated <a class=\"reference internal\" href=\"#term-weight\"><em class=\"xref std std-term ODSAterm\">weight</em></a> or cost.</dd>", "algorithm": "<dd>A method or a process followed to solve a <a class=\"reference internal\" href=\"#term-problem\"><em class=\"xref std std-term ODSAterm\">problem</em></a>.</dd>", "UNION/FIND": "<dd>A process for mainining a collection of disjoint sets.\nThe <a class=\"reference internal\" href=\"#term-find\"><em class=\"xref std std-term ODSAterm\">FIND</em></a> operation determines which disjoint set a given\nobject resides in, and the <a class=\"reference internal\" href=\"#term-union\"><em class=\"xref std std-term ODSAterm\">UNION</em></a> operation combines two\ndisjoint sets when it is determined that they are members of the\nsame <a class=\"reference internal\" href=\"#term-equivalence-class\"><em class=\"xref std std-term ODSAterm\">equivalence class</em></a> under some\n<a class=\"reference internal\" href=\"#term-equivalence-relation\"><em class=\"xref std std-term ODSAterm\">equivalence relation</em></a>.</dd>", "directed acyclic graph": "<dd>A <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> with no cycles.\nAbbreviated as <a class=\"reference internal\" href=\"#term-dag\"><em class=\"xref std std-term ODSAterm\">DAG</em></a>.\nNote that a DAG is not necessarily a <a class=\"reference internal\" href=\"#term-460\"><em class=\"xref std std-term ODSAterm\">tree</em></a> since a given\n<a class=\"reference internal\" href=\"#term-node\"><em class=\"xref std std-term ODSAterm\">node</em></a> might have multiple <a class=\"reference internal\" href=\"#term-parent\"><em class=\"xref std std-term ODSAterm\">parents</em></a>.</dd>", "sparse graph": "<dd>A <a class=\"reference internal\" href=\"#term-graph\"><em class=\"xref std std-term ODSAterm\">graph</em></a> where the actual number of <a class=\"reference internal\" href=\"#term-edge\"><em class=\"xref std std-term ODSAterm\">edges</em></a>\nis much less than the possible number of edges.\nGenerally, this is interpreted to mean that the <a class=\"reference internal\" href=\"#term-degree\"><em class=\"xref std std-term ODSAterm\">degree</em></a>\nfor any <a class=\"reference internal\" href=\"#term-vertex\"><em class=\"xref std std-term ODSAterm\">vertex</em></a> in the graph is relatively low.</dd>", "undirected graph": "<dd>A graph whose edges do not have a direction.</dd>", "vertices <vertex>": ""}}